{"version":3,"sources":["QuestionStatus.js","QuestionOption.js","Question.js","SampleQuestions.js","Test.js","App.js","serviceWorker.js","index.js"],"names":["StatusBubble","_ref","active","onPress","label","backgroundColor","bubbleColor","react_default","a","createElement","style","display","fontSize","height","width","padding","margin","borderRadius","alignItems","justifyContent","onClick","getQuestionStatusBackgroundColor","questionIndex","answerChoices","undefined","markForReview","selectedOption","visited","QuestionStatus","props","currentQuestionIndex","questions","updateSelectedQuestion","flexWrap","flexDirection","map","question","index","QuestionStatus_StatusBubble","key","QuestionOption","content","marginRight","MarkForReview","mark","Question","updateChoice","answerChoice","_props$question","options","currentReviewStatus","marginBottom","color","Question_MarkForReview","option","src_QuestionOption","Test","state","fetchedQuestionFromAPI","choice","value","_this","setState","_this2","this","_this$state","styles","container","flex","src_Question","src_QuestionStatus","Component","App","src_Test","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.305b6859.chunk.js","sourcesContent":["import React from 'react'\n\nconst QuestionStatus = (props) => {\n  const {currentQuestionIndex, questions, updateSelectedQuestion, answerChoices} = props;\n\n  return (\n    <div style={{display: 'flex', flexWrap: 'wrap', flexDirection: 'row', padding: 15}}>\n      {questions.map((question, index) => {\n        const backgroundColor = getQuestionStatusBackgroundColor(index, answerChoices);\n        return(\n          <StatusBubble\n            key={index}\n            active={index === currentQuestionIndex}\n            backgroundColor={backgroundColor}\n            onPress={() => updateSelectedQuestion(index)}\n            label={index + 1}\n          />\n        )\n      })}\n    </div>\n  )\n}\n\nconst StatusBubble = ({active, onPress, label, backgroundColor}) => {\n  const bubbleColor = active ? '#c8dad3' : backgroundColor;\n  return (\n    <div\n      style={{ display: 'flex', fontSize: 30, backgroundColor: bubbleColor,\n        height: 60, width: 60, padding: 10, margin: 5, borderRadius: 40,\n        alignItems: 'center', justifyContent: 'center'\n      }}\n      onClick={() => onPress()}\n    >\n      {label}\n    </div>\n  )\n}\n\nconst getQuestionStatusBackgroundColor = ((questionIndex, answerChoices) => {\n  if(answerChoices[questionIndex] !== undefined) {\n    if(answerChoices[questionIndex].markForReview === true) return '#63707e';\n    else if(answerChoices[questionIndex].selectedOption !== undefined) return '#93b5b3';\n    else if(answerChoices[questionIndex].visited !== undefined) return '#f2f6f5';\n  }\n\n  return '#ffe6e6'\n})\n\nexport default QuestionStatus;\n","import React from 'react'\n\nconst QuestionOption = ({label, content, onPress, active}) => {\n  const backgroundColor = active? '#fbd1b7': '#fee9b2';\n  return (\n    <div\n      style={{display: 'flex', flexDirection: 'row', padding: 15, margin: 5, backgroundColor: backgroundColor, borderRadius: 5, fontSize: 30}}\n      onClick={onPress}\n    >\n      <div style={{display: 'flex', marginRight: 20, backgroundColor: '#fbd1b7', width: 40, height: 40, borderRadius: 20, alignItems: 'center', justifyContent: 'center'}}>\n        {label}\n      </div>\n      <div style={{display: 'flex', alignItems: 'center', justifyContent: 'center'}}>\n        {content}\n      </div>\n    </div>\n  )\n}\n\nexport default QuestionOption;\n","import React from 'react'\nimport QuestionOption from './QuestionOption'\n\nconst Question = (props) => {\n  const {currentQuestionIndex, updateChoice, answerChoice} = props;\n  const {question, options} = props.question;\n\n  let currentReviewStatus = false;\n  if(answerChoice && answerChoice.markForReview){\n    currentReviewStatus = true;\n  }\n\n  return (\n    <div>\n      <div>\n        <div style={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-between'}}>\n          <div style={{display: 'flex', marginBottom: 20, color: 'gray'}}>Question # {currentQuestionIndex + 1}</div>\n          <MarkForReview\n            onPress={() =>updateChoice(currentQuestionIndex, 'markForReview', !currentReviewStatus)}\n            mark={currentReviewStatus}\n          />\n        </div>\n        <div style={{display: 'flex', flexDirection: 'row', padding: 15, margin: 5, backgroundColor: '#fee9b2', borderRadius: 5, fontSize: 30}}>\n          {question}\n        </div>\n      </div>\n      <div>\n        {options.map( (option, index) =>\n          <QuestionOption\n            key={index}\n            content={option}\n            label={index + 1}\n            active={answerChoice !== undefined && answerChoice.selectedOption === index}\n            onPress={() => updateChoice(currentQuestionIndex, 'selectedOption', index)}\n          />)}\n      </div>\n    </div>\n  )\n}\n\nconst MarkForReview = ({onPress, mark}) => {\n  const backgroundColor = mark?'#63707e':'#f2f6f5';\n  return(\n    <div\n      style={{ display: 'flex', backgroundColor: backgroundColor, fontSize: 15, padding: 10, margin:5, borderRadius: 15}}\n      onClick={onPress}\n    >\n      {mark?'Marked':'Mark Question'}\n    </div>\n  )\n}\n\nexport default Question;\n","const questions = [\n  {\n    question: \"'Dandia' is a popular dance of\",\n    options: [\n      \"Punjab\", \"Gujarat\", \"Tamil Nadu\", \"Maharashtra\"\n    ]\n  },\n  {\n    question: \"The book of Parsis is?\",\n    options: [\n      \"Torah\", \"Bible\", \"Zend Avesta\", \"Gita\"\n    ]\n  },\n  {\n    question: \"'Kathakali' is a folk dance prevalent in which state?\",\n    options: [\n      \"Kerala\", \"Tamil Nadu\", \"Karnataka\", \"Delhi\"\n    ]\n  },\n  {\n    question: \"The ratio of width of our National flag to its length is\",\n    options: [\n      \"1:1\", \"1:2\", \"2:3\", \"3:4\"\n    ]\n  },\n  {\n    question: \"What is the capital city of India?\",\n    options: [\n      \"Delhi\", \"New  Delhi\", \"Delhi NCR\", \"Old Delhi\"\n    ]\n  },\n  {\n    question: \"What is the currency symbol of India?\",\n    options: [\n      \"$\", \"#\", \"₹\", \"€\"\n    ]\n  },\n  {\n    question: \"Tamil language aged more than ----\",\n    options: [\n      \"1000 Yrs\", \"2000 Yrs\", \"500 Yrs\", \"700 Yrs\"\n    ]\n  },\n  {\n    question: \"What is the total number of MP seats in India?\",\n    options: [\n      \"532\", \"542\", \"435\", \"452\"\n    ]\n  },\n];\n\nexport default questions;\n","import React, {Component} from 'react';\nimport QuestionStatus from \"./QuestionStatus\"\nimport Question from './Question'\nimport fetchedQuestionFromAPI from './SampleQuestions'\n\nclass Test extends Component {\n\n  state = {\n    questions: fetchedQuestionFromAPI,\n    currentQuestionIndex: 0,\n    answerChoices: {}\n  }\n\n\n  updateChoice = ((questionIndex, choice, value) => {\n    const {answerChoices} = this.state;\n    if(answerChoices[questionIndex] === undefined) {\n      answerChoices[questionIndex] = {};\n    }\n    answerChoices[questionIndex][choice] = value;\n    this.setState({answerChoices});\n  })\n\n  render() {\n    const {questions, currentQuestionIndex, answerChoices} = this.state;\n    return (\n      <div style={styles.container}>\n        <h1>Sample test taking react application - POC</h1>\n        <div style={{display: 'flex', flexDirection: 'row'}}>\n          <div style={{display: 'flex', flex: 2, backgroundColor: '#f9fce1', margin: 10, borderRadius: 5, padding: 20}}>\n            <Question\n              currentQuestionIndex={currentQuestionIndex}\n              question={questions[currentQuestionIndex]}\n              answerChoice={answerChoices[currentQuestionIndex]}\n              updateChoice={this.updateChoice}\n            />\n          </div>\n          <div style={{display: 'flex', flex: 1, backgroundColor: '#f1f8b9', margin: 10, borderRadius: 5, padding: 20}}>\n            <QuestionStatus\n              currentQuestionIndex = {currentQuestionIndex}\n              questions={questions}\n              answerChoices={answerChoices}\n              updateSelectedQuestion={(index) => this.setState({currentQuestionIndex: index})}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst styles = {\n  container: {\n    //backgroundColor: ''\n  }\n}\n\nexport default Test;\n","import React from 'react';\nimport Test from './Test'\n\nfunction App() {\n  return (\n    <Test />\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}